// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Custom User model with Swarm Works specific fields
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  githubId      Int?      @unique
  bio           String?
  location      String?
  company       String?
  blog          String?
  publicRepos   Int?      @default(0)
  followers     Int?      @default(0)
  following     Int?      @default(0)
  
  // Swarm Works specific fields
  role          UserRole  @default(DEVELOPER)
  isVerified    Boolean   @default(false)
  reputation    Int       @default(0)
  totalEarnings Decimal   @default(0) @db.Decimal(10, 2)
  totalSpent    Decimal   @default(0) @db.Decimal(10, 2)
  timezone      String?
  availability  UserAvailability @default(AVAILABLE)
  hourlyRate    Decimal?  @db.Decimal(8, 2)
  
  // Skills and certifications
  skills        String[]
  languages     String[]
  certifications String[]
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?

  // Relations
  accounts      Account[]
  sessions      Session[]
  
  // Projects as client
  clientProjects Project[] @relation("ClientProjects")
  
  // Proposals as developer
  proposals     Proposal[]
  
  // Reviews given and received
  reviewsGiven    Review[] @relation("ReviewsGiven")
  reviewsReceived Review[] @relation("ReviewsReceived")
  
  // Messages
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  
  // Payments
  paymentsPaid     Payment[] @relation("PaymentsPaid")
  
  // AI Sessions
  aiSessions       AISession[]
  aiFeedback       AIFeedback[]
}

enum UserRole {
  DEVELOPER
  CLIENT
  ADMIN
}

enum UserAvailability {
  AVAILABLE
  BUSY
  UNAVAILABLE
}

// Project model
model Project {
  id              String            @id @default(cuid())
  title           String
  description     String            @db.Text
  category        ProjectCategory
  skills          String[]
  budgetType      BudgetType
  budgetMin       Decimal           @db.Decimal(10, 2)
  budgetMax       Decimal           @db.Decimal(10, 2)
  timeline        String
  experienceLevel ExperienceLevel
  githubRepo      String?
  tags            String[]
  status          ProjectStatus     @default(OPEN)
  
  // Client information
  clientId        String
  client          User              @relation("ClientProjects", fields: [clientId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  proposals       Proposal[]
  attachments     Attachment[]
  messages        Message[]
  reviews         Review[]
  payments        Payment[]
}

enum ProjectCategory {
  BUG_FIX
  NEW_FEATURE
  FULL_PROJECT
  CODE_REVIEW
  REFACTORING
  DOCUMENTATION
  TESTING
  DEPLOYMENT
}

enum BudgetType {
  FIXED
  HOURLY
}

enum ExperienceLevel {
  BEGINNER
  INTERMEDIATE
  EXPERT
}

enum ProjectStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Proposal model
model Proposal {
  id              String          @id @default(cuid())
  projectId       String
  developerId     String
  coverLetter     String          @db.Text
  proposedBudget  Decimal         @db.Decimal(10, 2)
  estimatedTime   String
  availability    String
  githubSamples   String[]
  status          ProposalStatus  @default(PENDING)
  
  // Relations
  project         Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  developer       User            @relation(fields: [developerId], references: [id], onDelete: Cascade)
  milestones      Milestone[]
  payments        Payment[]
  
  // Timestamps
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

enum ProposalStatus {
  PENDING
  SHORTLISTED
  ACCEPTED
  REJECTED
}

// Milestone model
model Milestone {
  id          String          @id @default(cuid())
  proposalId  String
  title       String
  description String          @db.Text
  amount      Decimal         @db.Decimal(10, 2)
  duration    String
  order       Int
  status      MilestoneStatus @default(PENDING)
  
  // Relations
  proposal    Proposal        @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  dueDate     DateTime?
  completedAt DateTime?
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Attachment model
model Attachment {
  id        String        @id @default(cuid())
  projectId String
  filename  String
  url       String
  type      AttachmentType
  size      Int
  
  // Relations
  project   Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt DateTime      @default(now())
}

enum AttachmentType {
  DOCUMENT
  IMAGE
  DESIGN
  OTHER
}

// Message model for client-developer communication
model Message {
  id         String      @id @default(cuid())
  projectId  String
  senderId   String
  receiverId String
  content    String      @db.Text
  type       MessageType @default(TEXT)
  
  // Relations
  project    Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  sender     User        @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User        @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt  DateTime    @default(now())
  readAt     DateTime?
}

enum MessageType {
  TEXT
  FILE
  MILESTONE_UPDATE
  PAYMENT_UPDATE
}

// Review model
model Review {
  id          String   @id @default(cuid())
  projectId   String
  reviewerId  String
  revieweeId  String
  rating      Int      // 1-5 stars
  title       String
  comment     String   @db.Text
  helpful     Int      @default(0)
  
  // Relations
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  reviewer    User     @relation("ReviewsGiven", fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewee    User     @relation("ReviewsReceived", fields: [revieweeId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Payment model for Solana Pay integration
model Payment {
  id                  String        @id @default(cuid())
  projectId           String
  proposalId          String?
  payerId             String
  amount              Decimal       @db.Decimal(10, 2)
  paymentMethod       PaymentMethod
  status              PaymentStatus @default(PENDING)
  reference           String?       // Solana Pay reference
  transactionSignature String?     // Solana transaction signature
  description         String?
  
  // Timestamps
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  expiresAt           DateTime?
  confirmedAt         DateTime?
  
  // Relations
  project             Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  proposal            Proposal?     @relation(fields: [proposalId], references: [id], onDelete: SetNull)
  payer               User          @relation("PaymentsPaid", fields: [payerId], references: [id], onDelete: Cascade)
}

enum PaymentMethod {
  SOL
  USDC
  SWARM
}

enum PaymentStatus {
  PENDING
  CONFIRMED
  FAILED
  EXPIRED
  REFUNDED
}

// AI Session model for tracking AI usage
model AISession {
  id            String       @id @default(cuid())
  userId        String
  agentType     String       // ReactBot, BackendGuru, CodeReviewer, MentorBot
  task          String       // analyze, review, explain, test, suggest
  inputCode     String       @db.Text
  outputResult  String?      @db.Text
  language      String?
  tokensUsed    Int?
  status        AIStatus     @default(processing)
  error         String?
  
  // Timestamps
  createdAt     DateTime     @default(now())
  completedAt   DateTime?
  
  // Relations
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  feedback      AIFeedback[]
}

enum AIStatus {
  processing
  completed
  failed
}

// AI Feedback model for improving AI responses
model AIFeedback {
  id          String    @id @default(cuid())
  sessionId   String
  userId      String
  helpful     Boolean
  rating      Int?      // 1-5 stars
  comment     String?   @db.Text
  
  // Timestamps
  createdAt   DateTime  @default(now())
  
  // Relations
  session     AISession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}